vi SieveOfEratosthenes(int n)
{
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
 
    for (int p = 2; p * p <= n; p++)
    {
        if (prime[p] == true) 
        {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    vi v;
    for (int p = 2; p <= n; p++)
        if (prime[p])v.pb(p);
    return v;
}
void primesInRange(int low, int high, vi &v)
{
     
    int lim = sqrt(high);
    ++lim;
    vector<int> prime = SieveOfEratosthenes(lim);
    int n = high - low + 1;
    
    bool mark[n + 1];
    memset(mark, false, sizeof(mark));
    for (int i = 0; i < (int)prime.size(); i++) 
    {
        int loLim = floor(low / prime[i]) * prime[i];
        if (loLim < low)
            loLim += prime[i];
        if(loLim==prime[i])
            loLim += prime[i];
         
        for (int j = loLim; j <= high; j += prime[i])
            mark[j - low] = true;
    }
 
    for (int i = low; i <= high; i++) 
        if (!mark[i - low])v.pb(i);
}
