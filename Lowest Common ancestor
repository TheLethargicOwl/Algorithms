vi g[N];
int par[N][K], h[N], n;

void dfs(ll v, ll p, ll hgt) {
	par[v][0] = p;
	h[v] = hgt;
	for(ll u:g[v]) {
		if(u == p)continue;
		dfs(u, v, hgt + 1);
	}
}

void precompute() {
	for(int j = 1; j < K; j++) {
		for(int i = 1; i <= n; i++) {
			par[i][j] = par[par[i][j - 1]][j - 1];
		}
	}
}

int kth_anc(ll u, ll k) {
	for(int i = 17; i >= 0; i--) {
		if(k & (1 << i)) {
			u = par[u][i];
		}
	}
	return u;
}

int LCA(ll u, ll v) {
	if(h[u] > h[v])swap(u, v);
	int diff = h[v] - h[u];
	v = kth_anc(v, diff);
	if(u == v)return u;
	for(int i = 17; i >= 0; i--) {
		if(par[u][i] != par[v][i]) {
			u = par[u][i];
			v = par[v][i];
		}
	}
	return par[u][0];
}
