const int N = 1e5 + 1, LG = log2(1e5 + 1) + 1;

int dp[N][LG], hgt[N], n;
vi g[N];

void dfs(int v, int par, int h) {
	dp[v][0] = par;
	hgt[v] = h;
	for(int u:g[v]) {
		if(u == par)continue;
		dfs(u, v, h + 1);
	}
}

void pre() {
	for(int j = 1; j < LG; ++j) {
		for(int i = 1; i <= n; ++i) {
			dp[i][j] = dp[dp[i][j - 1]][j - 1];
		}
	}
}

int kth_anc(int v, int k) {
	for(int j = LG - 1; j >= 0; --j) {
		if(k & (1ll << j)) {
			v = dp[v][j];
		}
	}
	return v;
}

int LCA(int u, int v) {
	if(hgt[u] < hgt[v])swap(u, v);
	u = kth_anc(u, hgt[u] - hgt[v]);
	if(u == v)return u;
	for(int i = LG - 1; i >= 0; --i) {
		if(dp[u][i] != dp[v][i]) {
			u = dp[u][i];
			v = dp[v][i];
		}
	}
	return dp[u][0];
}
